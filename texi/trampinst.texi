@c -*-texinfo-*-

@c Mark availability of macros
@set tramp-inst

@c Emacs values.
@ifset emacs
@set emacs-other-name         XEmacs
@set emacs-other-dir          xemacs
@set emacs-other-file-name    tramp-xemacs.html
@end ifset

@c XEmacs counterparts.
@ifset xemacs
@set emacs-other-name         Emacs
@set emacs-other-dir          emacs
@set emacs-other-file-name    tramp-emacs.html
@end ifset

@c Text describing how to get alternate version.
@unmacro otherflavor
@macro otherflavor
The manual has been generated for @value{emacs-name}.
@ifinfo
If you want to read the info pages for @value{emacs-other-name}, you
should read in @ref{Installation} how to create them.
@end ifinfo
@ifhtml
If you're using the other Emacs flavour, you should read the
@uref{@value{emacs-other-file-name}, @value{emacs-other-name}} pages.
@end ifhtml
@end macro

@c The installation chapter.
@unmacro installationchapter
@macro installationchapter
@node Installation
@chapter Installing @tramp{} into @value{emacs-name}.
@cindex installation

If you use the version that comes with your @value{emacs-name}, the
following information is not necessary.  Installing @tramp{} into your
@value{emacs-name} is a relatively easy process, at least compared
to rebuilding your machine from scratch. ;)

Seriously though, the installation should be a fairly simple matter.
The easiest way to proceed is as follows:

@itemize @bullet
@item
Choose a directory, say @file{~/@value{emacs-dir}/}.  Change into that
directory and unpack the tarball.  This will give you a directory
@file{~/@value{emacs-dir}/tramp-@trampver{}/} which contains
subdirectories @file{lisp} for the Lisp code and @file{texi} for the
documentation.  Make a symbolic link:

@example
ln -s tramp-@trampver{} tramp
@end example

@item
@command{cd} to @file{~/@value{emacs-dir}/tramp/} and type
@command{./configure} to configure Tramp for your system.

Running `configure' takes awhile.  While running, it prints some
messages telling which features it is checking for.

@item
Type @command{make} to build the byte-compiled Lisp files as well as
the Info manual.

@item
Type @command{make install} to install the Tramp Lisp files and Info
manual.

@item
You can remove the byte-compiled Lisp files and the Info manual from
the source directory by typing @command{make clean}.  To also remove
the files that @command{configure} created, type @command{make
distclean}.

@item
NOTE: If you run into problems running the example @command{make}
command, don't despair.  You can still byte compile the @file{*.el}
files by opening @value{emacs-name} in @command{dired} (@command{C-x
d}) mode, at @file{~/@value{emacs-dir}/tramp/lisp}.  Mark the lisp files with
@kbd{m}, then press @kbd{B} to byte compile your selections.

Something similar can be done to create the info manual.  Just change
to directory @file{~/@value{emacs-dir}/tramp/texi} and load the
@file{tramp.texi} file in @value{emacs-name}.  Then press @kbd{M-x
texinfo-format-buffer @key{RET}} to generate
@file{~/@value{emacs-dir}/tramp/info/tramp}.
@end itemize

@menu
* Installation parameters::     Parameters in order to control installation.
* Load paths::                  How to plug-in @tramp{} into your environment.
* Japanese manual::             Japanese manual.
@end menu

@node Installation parameters
@section Parameters in order to control installation.
@cindex installation

By default, @command{make install} will install @tramp{}'s files in
@file{@value{lispdir}} and @file{@value{infodir}}.  You can specify an
installation prefix other than @file{@value{prefix}} by giving
@command{configure} the option @option{--prefix=PATH}.

If your installed copy of Emacs is named something other than
@option{@value{emacs-dir}}, you will need to tell `make' where to find it so
that it can correctly byte-compile the @tramp{} sources.

For example, to force the use of @value{emacs-other-name} you might do
this:

@example
./configure --with-@value{emacs-other-dir}
make
make install
@end example

or this:

@example
./configure
make EMACS=/usr/bin/@value{emacs-other-dir}-21.4
make install
@end example

The syntax of @tramp{} file names is different for @value{emacs-name}
and @value{emacs-other-name}.  The Info manual will be generated for
the Emacs flavor choosen in the @command{configure} phase. If you want
the Info manual for the other version, you need to set the variable
@option{EMACS_INFO} to @command{make}:

@example
./configure --with-@value{emacs-dir}
make EMACS_INFO=@value{emacs-other-dir}
@end example

Also, the @option{--prefix=PATH} option to @command{configure} may
not be general enough to set the paths you want.  If not, you can pass
variables to the @command{make} command to control the installation.
For a complete list of tweakable variables, look in the makefile.

For example, to put the Lisp files in @file{~/elisp} and the Info file
in @file{~/info}, you would type:

@example
./configure
make
make lispdir=~/elisp infodir=~/info install
@end example

@tramp{} has some packages in its @file{contrib} directory which are
missing in older Emacsen.  If you want to use them, you must use the
@option{USE_CONTRIB} environment variable:

@example
make USE_CONTRIB=1
make USE_CONTRIB=1 install
@end example

@node Load paths
@section How to plug-in @tramp{} into your environment.
@cindex installation

If you don't install @tramp{} into the intended directories, but prefer
to use from the source directory, you need to add the following lines
into your @file{.emacs}:

@c We must define the strings as macros.  Otherwise, texi2dvi fails.
@set emacs-lisp-dir "~/@value{emacs-dir}/tramp/lisp/"
@set emacs-contrib-dir "~/@value{emacs-dir}/tramp/contrib/"
@lisp
(add-to-list 'load-path @value{emacs-lisp-dir})
(add-to-list 'load-path @value{emacs-contrib-dir})
(require 'tramp)
@end lisp

The second load-path must be used only if you've applied the
@option{USE_CONTRIB} parameter.

@ifset xemacs
NOTE: For @value{emacs-name}, the package @file{fsf-compat} must be
installed.  For details on package installation, see @ref{Packages, ,
,xemacs}.
@ifhtml
(If the previous link doesn't work, try the @value{emacs-name}
documentation at
@uref{http://www.xemacs.org/Documentation/packageGuide.html,the
@value{emacs-name} site}.)
@end ifhtml
@end ifset

To be able to read the Info documentation, create a file
@file{~/@value{emacs-dir}/tramp/info/dir} using the
@command{install-info} command, and add the directory to the search
path for Info.

NOTE:
On systems using the @cite{gnu} version of @command{install-info}, the
@command{install-info} syntax is very direct and simple.  One can
change to directory @file{~/@value{emacs-dir}/tramp/info} and type:

@example
install-info tramp dir
@end example

and a @file{dir} file will be created with the @tramp{}
entry.  The info reader will know how to interpret it, but must
be told where to find it (see below).  If you want anything fancier
you'll need to look through @kbd{man install-info}.

Debian GNU/Linux doesn't default to @cite{gnu} @command{install-info}
but uses its own version.  This version does not create a @file{dir}
file for you from scratch.  You must provide a skeleton @file{dir}
file it recognizes.  One can be found in a default installation of
@value{emacs-name} at @file{/usr/info/dir}.  Copy the top of this file
down to the first occurrence of @code{* Menu} including that line plus
one more blank line, to your working directory
@file{~/@value{emacs-dir}/tramp/info}, or use the sample
@file{~/@value{emacs-dir}/tramp/texi/dir_sample}.

Once a @file{dir} file is in place, this command will make the entry:

@example
install-info --infodir=. tramp
@end example

If you want it in a specific category see @kbd{man install-info} for
further details.

If the environment variable @env{INFOPATH} is set, add the directory
@file{~/@value{emacs-dir}/tramp/info/} to it.  Else, add the directory to
@ifset emacs
@code{Info-default-directory-list}, as follows:

@c We must define the string as macro.  Otherwise, texi2dvi fails.
@set emacs-info-dir "~/@value{emacs-dir}/tramp/info/"
@lisp
(add-to-list 'Info-default-directory-list @value{emacs-info-dir})
@end lisp
@end ifset
@ifset xemacs
@code{Info-directory-list}, as follows:
@c We must define the string as macro.  Otherwise, texi2dvi fails.
@set emacs-info-dir "~/@value{emacs-dir}/tramp/info/"
@lisp
(add-to-list 'Info-directory-list @value{emacs-info-dir})
@end lisp
@end ifset

@node Japanese manual
@section Japanese manual.
@cindex installation

Thanks to Yoichi Nakayama @email{yoichi@@geiin.org}, there exists a
japanese translation of the @tramp{} manual.  You can generate it
applying the @option{--with-japanese-manual} option:

@example
./configure --with-japanese-manual
@end example

This will result in an Info manual
@iftex
@file{tramp_ja}.
@end iftex
@ifnottex
@ifset jamanual
@inforef{Top,,tramp_ja}.
@end ifset
@ifclear jamanual
@file{tramp_ja}.
@end ifclear
@end ifnottex

@end macro
